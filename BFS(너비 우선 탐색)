using System;
using System.Collections.Generic;


namespace exercise
{

    class Graph
    {
        int[,] adj = new int[6, 6]
        {
            {0,1,0,1,0,0 },
            {1,0,1,1,0,0 },
            {0,1,0,0,0,0 },
            {1,1,0,0,1,0 },
            {0,0,0,1,0,1 },
            {0,0,0,0,1,0 },
        };

        List<int>[] adj2 = new List<int>[]
        {
        new List<int>() {1,3},
        new List<int>() {0, 2, 3},
        new List<int>() {1},
        new List<int>() {0,1,4},
        new List<int>() {3,5},
        new List<int>() {4},
        };

        public void BFS(int start)
        {
            bool[]found = new bool[6];
            int[] parent = new int[6];//어디서부터 왔는지 추적
            int[] distance = new int[6];//도착까지 얼마의 거리가 걸렸는지 추적



            Queue<int> q = new Queue<int>();
            q.Enqueue(start);
            found[start] = true;

            found[start] = true; //0번
            parent[start] = start;
            distance[start] = 0;//시작점(0번)


            while (q.Count > 0)
            {
                int now = q.Dequeue();
                Console.WriteLine(now);

                for (int next = 0; next < 6; next++)
                {
                    if (adj[now, next] == 0)//인접하지 않았으면 스킵
                        continue;

                    if (found[next])//이미 발견한 것이라면 스킵
                        continue;

                    q.Enqueue(next);//예약목록

                    found[start] = true;
                    parent[start] = now; //1번의 부모는 0번(0-->1로 옴을 의미)
                    distance[next] = distance[now] + 1;//이전까지 간 거리 +1 = 이동 거리

                    found[next] = true; //예약목록에 넣고 true로 변경
                }

            }
        }
    }
     

    class Program
    {
        static void Main(string[] args)
        {
            //DFS(Depth First Search 깊이 우선 탐색
            //BFS(BREATH First Search 너비 우선 탐색
            Graph graph = new Graph();
            graph.BFS(0);//-->결과는 0 1 3 2 4 5
            

          
        }

    }
}
