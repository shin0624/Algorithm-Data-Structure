using System;
using System.Collections.Generic;


namespace exercise
{
    //BFS
    class Graph
    {
        int[,] adj = new int[6, 6]
        {
            {0,1,0,1,0,0 },
            {1,0,1,1,0,0 },
            {0,1,0,0,0,0 },
            {1,1,0,0,1,0 },
            {0,0,0,1,0,1 },
            {0,0,0,0,1,0 },
        };

        List<int>[] adj2 = new List<int>[]
        {
        new List<int>() {1,3},
        new List<int>() {0, 2, 3},
        new List<int>() {1},
        new List<int>() {0,1,4},
        new List<int>() {3,5},
        new List<int>() {4},
        };

       
        bool[] visited = new bool[6];
        //행렬 형태 이용 시
        //1. 우선 now 부터 방문
        //2.now와 연결된 정점들을 하나씩 확인해서 아직 미발견(미방문)상태라면 방문한다
        public void DFS(int now)
        {
            Console.WriteLine(now);
            visited[now] = true; //1. 우선 now 부터 방문

            for (int next=0; next<6; next++)//또는 adj.GetLength(0)으로도 가능
            {
                if (adj[now, next]== 0) //연결되어있지 않으면 스킵
                    continue;

            if (visited[next])//이미 방문했으면 스킵
                   continue;
                DFS(next);
            }

        }
        //리스트 이용 시
        public void DFS2(int now)
        {
            Console.WriteLine(now);
            visited[now] = true;//1. 우선 now 부터 방문

            foreach (int next in adj2[now])
            {
                if (visited[next])
                    continue;
                DFS2(next);
            }


        }

        public void SearchAll()//모든 정점을 순회하는 방법(정점 사이에 길이 끊어졌을 때 등)
        {
            visited= new bool[6];
            for (int now = 0; now < 6; now++)
                if (visited[now] ==false)
                    DFS(now);
        }

        }

    class Program
    {
        static void Main(string[] args)
        {           
            Graph graph = new Graph();
            graph.DFS(0);//--->0번을 기준으로 시작 후  0->1->2->3->4->5
            //각기 다른 값을 입력할 때 마다 다른 값을 기준으로 시작하므로 값이 달라짐

            graph.DFS2(0);
            graph.SearchAll();
        }
    }
}
